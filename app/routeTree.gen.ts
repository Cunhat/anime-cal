/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RedirectImport } from './routes/redirect'
import { Route as PostsImport } from './routes/posts'
import { Route as DeferredImport } from './routes/deferred'
import { Route as IndexImport } from './routes/index'
import { Route as PostsIndexImport } from './routes/posts.index'
import { Route as PostsPostIdImport } from './routes/posts.$postId'
import { Route as dashboardDashboardImport } from './routes/(dashboard)/_dashboard'
import { Route as PostsPostIdDeepImport } from './routes/posts_.$postId.deep'
import { Route as dashboardDashboardHomeImport } from './routes/(dashboard)/_dashboard.home'
import { Route as dashboardDashboardAnimeAnimeIdImport } from './routes/(dashboard)/_dashboard.anime.$animeId'

// Create Virtual Routes

const dashboardImport = createFileRoute('/(dashboard)')()

// Create/Update Routes

const dashboardRoute = dashboardImport.update({
  id: '/(dashboard)',
  getParentRoute: () => rootRoute,
} as any)

const RedirectRoute = RedirectImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const PostsRoute = PostsImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const DeferredRoute = DeferredImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRoute,
} as any)

const dashboardDashboardRoute = dashboardDashboardImport.update({
  id: '/_dashboard',
  getParentRoute: () => dashboardRoute,
} as any)

const PostsPostIdDeepRoute = PostsPostIdDeepImport.update({
  id: '/posts_/$postId/deep',
  path: '/posts/$postId/deep',
  getParentRoute: () => rootRoute,
} as any)

const dashboardDashboardHomeRoute = dashboardDashboardHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => dashboardDashboardRoute,
} as any)

const dashboardDashboardAnimeAnimeIdRoute =
  dashboardDashboardAnimeAnimeIdImport.update({
    id: '/anime/$animeId',
    path: '/anime/$animeId',
    getParentRoute: () => dashboardDashboardRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsImport
      parentRoute: typeof rootRoute
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)': {
      id: '/(dashboard)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)/_dashboard': {
      id: '/(dashboard)/_dashboard'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardDashboardImport
      parentRoute: typeof dashboardRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof PostsImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof PostsImport
    }
    '/(dashboard)/_dashboard/home': {
      id: '/(dashboard)/_dashboard/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof dashboardDashboardHomeImport
      parentRoute: typeof dashboardDashboardImport
    }
    '/posts_/$postId/deep': {
      id: '/posts_/$postId/deep'
      path: '/posts/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof PostsPostIdDeepImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)/_dashboard/anime/$animeId': {
      id: '/(dashboard)/_dashboard/anime/$animeId'
      path: '/anime/$animeId'
      fullPath: '/anime/$animeId'
      preLoaderRoute: typeof dashboardDashboardAnimeAnimeIdImport
      parentRoute: typeof dashboardDashboardImport
    }
  }
}

// Create and export the route tree

interface PostsRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

interface dashboardDashboardRouteChildren {
  dashboardDashboardHomeRoute: typeof dashboardDashboardHomeRoute
  dashboardDashboardAnimeAnimeIdRoute: typeof dashboardDashboardAnimeAnimeIdRoute
}

const dashboardDashboardRouteChildren: dashboardDashboardRouteChildren = {
  dashboardDashboardHomeRoute: dashboardDashboardHomeRoute,
  dashboardDashboardAnimeAnimeIdRoute: dashboardDashboardAnimeAnimeIdRoute,
}

const dashboardDashboardRouteWithChildren =
  dashboardDashboardRoute._addFileChildren(dashboardDashboardRouteChildren)

interface dashboardRouteChildren {
  dashboardDashboardRoute: typeof dashboardDashboardRouteWithChildren
}

const dashboardRouteChildren: dashboardRouteChildren = {
  dashboardDashboardRoute: dashboardDashboardRouteWithChildren,
}

const dashboardRouteWithChildren = dashboardRoute._addFileChildren(
  dashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof dashboardDashboardRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/posts': typeof PostsRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/posts/': typeof PostsIndexRoute
  '/home': typeof dashboardDashboardHomeRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/anime/$animeId': typeof dashboardDashboardAnimeAnimeIdRoute
}

export interface FileRoutesByTo {
  '/': typeof dashboardDashboardRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/posts': typeof PostsIndexRoute
  '/home': typeof dashboardDashboardHomeRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/anime/$animeId': typeof dashboardDashboardAnimeAnimeIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/posts': typeof PostsRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/(dashboard)': typeof dashboardRouteWithChildren
  '/(dashboard)/_dashboard': typeof dashboardDashboardRouteWithChildren
  '/posts/$postId': typeof PostsPostIdRoute
  '/posts/': typeof PostsIndexRoute
  '/(dashboard)/_dashboard/home': typeof dashboardDashboardHomeRoute
  '/posts_/$postId/deep': typeof PostsPostIdDeepRoute
  '/(dashboard)/_dashboard/anime/$animeId': typeof dashboardDashboardAnimeAnimeIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/deferred'
    | '/posts'
    | '/redirect'
    | '/posts/$postId'
    | '/posts/'
    | '/home'
    | '/posts/$postId/deep'
    | '/anime/$animeId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/deferred'
    | '/redirect'
    | '/posts/$postId'
    | '/posts'
    | '/home'
    | '/posts/$postId/deep'
    | '/anime/$animeId'
  id:
    | '__root__'
    | '/'
    | '/deferred'
    | '/posts'
    | '/redirect'
    | '/(dashboard)'
    | '/(dashboard)/_dashboard'
    | '/posts/$postId'
    | '/posts/'
    | '/(dashboard)/_dashboard/home'
    | '/posts_/$postId/deep'
    | '/(dashboard)/_dashboard/anime/$animeId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DeferredRoute: typeof DeferredRoute
  PostsRoute: typeof PostsRouteWithChildren
  RedirectRoute: typeof RedirectRoute
  dashboardRoute: typeof dashboardRouteWithChildren
  PostsPostIdDeepRoute: typeof PostsPostIdDeepRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DeferredRoute: DeferredRoute,
  PostsRoute: PostsRouteWithChildren,
  RedirectRoute: RedirectRoute,
  dashboardRoute: dashboardRouteWithChildren,
  PostsPostIdDeepRoute: PostsPostIdDeepRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/deferred",
        "/posts",
        "/redirect",
        "/(dashboard)",
        "/posts_/$postId/deep"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/deferred": {
      "filePath": "deferred.tsx"
    },
    "/posts": {
      "filePath": "posts.tsx",
      "children": [
        "/posts/$postId",
        "/posts/"
      ]
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/(dashboard)": {
      "filePath": "(dashboard)",
      "children": [
        "/(dashboard)/_dashboard"
      ]
    },
    "/(dashboard)/_dashboard": {
      "filePath": "(dashboard)/_dashboard.tsx",
      "parent": "/(dashboard)",
      "children": [
        "/(dashboard)/_dashboard/home",
        "/(dashboard)/_dashboard/anime/$animeId"
      ]
    },
    "/posts/$postId": {
      "filePath": "posts.$postId.tsx",
      "parent": "/posts"
    },
    "/posts/": {
      "filePath": "posts.index.tsx",
      "parent": "/posts"
    },
    "/(dashboard)/_dashboard/home": {
      "filePath": "(dashboard)/_dashboard.home.tsx",
      "parent": "/(dashboard)/_dashboard"
    },
    "/posts_/$postId/deep": {
      "filePath": "posts_.$postId.deep.tsx"
    },
    "/(dashboard)/_dashboard/anime/$animeId": {
      "filePath": "(dashboard)/_dashboard.anime.$animeId.tsx",
      "parent": "/(dashboard)/_dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
